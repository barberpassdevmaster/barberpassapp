Contexto do Projeto
Desenvolver o sistema BarberPass, uma plataforma de assinatura, marketplace e gest√£o de barbearias. O sistema deve contemplar clientes, barbearias e administradores, com integra√ß√µes de pagamentos, gamifica√ß√£o e futuramente eventos.

‚∏ª

1. Requisitos Funcionais

Cliente
	‚Ä¢	Cadastro (dados b√°sicos + foto estilo perfil Uber).
	‚Ä¢	Adicionar m√©todos de pagamento (wallet).
	‚Ä¢	Assinar plano, realizar upgrade/downgrade.
	‚Ä¢	Hist√≥rico de atendimentos.
	‚Ä¢	Favoritar barbearias e barbeiros.
	‚Ä¢	Score/gamifica√ß√£o por uso e indica√ß√µes.
	‚Ä¢	√Årea de notifica√ß√µes.
	‚Ä¢	Buscar barbearias estilo marketplace (mapa, filtros, an√∫ncios, ranking).
	‚Ä¢	Avaliar barbearias e barbeiros.
	‚Ä¢	Dar caixinha digital (tip).
	‚Ä¢	Realizar check-in ao chegar na barbearia, confirmando pagamento.

Barbearia
	‚Ä¢	Cadastro (dados b√°sicos + dados banc√°rios).
	‚Ä¢	Hist√≥rico de recebimentos, estat√≠sticas e relat√≥rios.
	‚Ä¢	Cadastro de barbeiros, agenda e servi√ßos.
	‚Ä¢	Precifica√ß√£o:
	‚Ä¢	Op√ß√£o A: usar sistema BarberHub de precifica√ß√£o e assinatura.
	‚Ä¢	Op√ß√£o B: barbearia j√° possui sistema pr√≥prio, apenas insere valores finais.
	‚Ä¢	Receber agendamentos (via app e redund√¢ncia por WhatsApp).
	‚Ä¢	Confirmar ou rejeitar agendamentos ‚Üí cliente √© informado.

Administrador
	‚Ä¢	Configurar par√¢metros financeiros (taxas, descontos, faixas).
	‚Ä¢	Aprovar/reprovar barbearias.
	‚Ä¢	Gerenciar an√∫ncios patrocinados.
	‚Ä¢	Gerar relat√≥rios globais.

Futuras Funcionalidades
	‚Ä¢	Plataforma completa de agendamentos e gest√£o interna.
	‚Ä¢	Venda de ingressos para eventos de barbearia (bilheteria).

‚∏ª

2. Requisitos N√£o Funcionais
	‚Ä¢	C√≥digo documentado, com coment√°rios claros e consistentes.
	‚Ä¢	Padr√£o de codifica√ß√£o clean code + MVC/DAO.
	‚Ä¢	Documenta√ß√£o em OpenAPI/Swagger.
	‚Ä¢	Testes automatizados gerados pela IA, com cobertura unit√°ria e de integra√ß√£o.
	‚Ä¢	CI/CD automatizado para build, testes e deploy.
	‚Ä¢	Escalabilidade (usar arquitetura baseada em microsservi√ßos quando necess√°rio).
	‚Ä¢	Seguran√ßa em transa√ß√µes financeiras (PCI-DSS, LGPD).

‚∏ª

3. Arquitetura e Tecnologias
	‚Ä¢	Frontend/App: Flutter (Android, iOS, Web).
	‚Ä¢	Backend: Node.js com NestJS.
	‚Ä¢	Banco de Dados: PostgreSQL.
	‚Ä¢	Infraestrutura: AWS ou GCP (com pipeline CI/CD).
	‚Ä¢	Mensageria/Notifica√ß√µes: Firebase Cloud Messaging.
	‚Ä¢	Pagamentos: Stripe / Mercado Pago / Pix.

‚∏ª

4. Modelos UML a Gerar
	‚Ä¢	Diagrama de Casos de Uso (clientes, barbearias, admin).
	‚Ä¢	Diagrama de Classes (entidades: Cliente, Barbearia, Barbeiro, Servi√ßo, Plano, Wallet, Transa√ß√£o, Evento, Notifica√ß√£o, Avalia√ß√£o).
	‚Ä¢	Diagrama de Sequ√™ncia (fluxos: cadastro, assinatura, pagamento/check-in, agendamento, avalia√ß√£o).
	‚Ä¢	Diagrama de Implanta√ß√£o (arquitetura: app, backend, DB, cloud).
	‚Ä¢	Diagrama ERD (Banco de Dados).

‚∏ª

5. Backlog Inicial (MVP)
	‚Ä¢	Sprint 1: Cadastro (cliente, barbearia), autentica√ß√£o, wallet, planos.
	‚Ä¢	Sprint 2: Hist√≥rico, favoritos, notifica√ß√µes, marketplace (busca, mapa, ranking).
	‚Ä¢	Sprint 3: Avalia√ß√µes, caixinha digital, admin (aprova√ß√£o, par√¢metros financeiros).
	‚Ä¢	Sprint 4: Propostas comerciais, estat√≠sticas barbearia, an√∫ncios patrocinados.
	‚Ä¢	P√≥s-MVP: agendamentos internos, bilheteria de eventos.

‚∏ª

6. Instru√ß√µes para Gera√ß√£o de C√≥digo
	‚Ä¢	Gerar c√≥digo organizado, com pastas separadas para m√≥dulos, controllers, services, repositories.
	‚Ä¢	Usar coment√°rios explicativos em todas as classes e fun√ß√µes.
	‚Ä¢	Criar testes automatizados para cada requisito da matriz de rastreabilidade.
	‚Ä¢	Seguir padr√£o de commits Git convencionais.
	‚Ä¢	Manter documenta√ß√£o t√©cnica completa (Swagger + README detalhado).

‚∏ª

üìå Instru√ß√£o final para a IA (Trae):

‚ÄúCom base neste documento, gere a arquitetura do projeto, o c√≥digo backend e frontend, os modelos UML, o banco de dados (PostgreSQL) e os testes automatizados. O sistema deve estar pronto para rodar em ambiente de desenvolvimento e preparado para deploy em produ√ß√£o com CI/CD.‚Äù
